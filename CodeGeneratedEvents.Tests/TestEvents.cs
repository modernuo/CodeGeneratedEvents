using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using ModernUO.CodeGeneratedEvents;

public class GeneratedEventSourceGeneratorTests
{
    [Fact]
    public async Task TestGeneratedEventMethod()
    {
        // Create an instance of the source generator
        var generator = new EventGenerator();

        string version = null;
        foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
        {
            if (assembly.FullName.Contains("ModernUO"))
            {
                version = assembly.GetName().Version.ToString();
                break;
            }
        }

        // Arrange
        var source1 =
            """
                using System;
                using ModernUO.CodeGeneratedEvents;

                namespace MyEvents;

                public static class TestEvents1
                {
                    [OnEvent("MyEvent")]
                    public static void OnMyEvent(string arg1, string arg2)
                    {
                        Console.WriteLine("Something happened!", arg1, arg2);
                    }

                    private const string MyEvent = "MyEvent";

                    [OnEvent(MyEvent)]
                    public static void OnMyEvent2(string arg1, string arg2)
                    {
                        Console.WriteLine("Something happened! Again!", arg1, arg2);
                    }
                }

            """.Replace("\n", Environment.NewLine).TrimStart();

        var source2 =
            """
                using System;
                using ModernUO.CodeGeneratedEvents;

                namespace MyEvents;

                public static partial class TestEvents2
                {
                    [GeneratedEvent(nameof(MyEvent))]
                    public static partial void MyEvent(string arg1, string arg2);
                }

            """.Replace("\n", Environment.NewLine).TrimStart();

        var expectedGeneratedCode =
            $$"""
            // <auto-generated>
            //     This code was generated by the ModernUO Code Generated Events Generator tool.
            //     Version: {{version}}
            //
            //     Changes to this file may cause incorrect behavior and will be lost if the
            //     code is regenerated.
            // </auto-generated>

            namespace MyEvents;

            [System.CodeDom.Compiler.GeneratedCode("ModernUO.CodeGeneratedEvents.Generator", "{{version}}")]
            public static partial class TestEvents2
            {
                public static partial void MyEvent(string arg1, string arg2)
                {
                    MyEvents.TestEvents1.OnMyEvent(arg1, arg2);
                    MyEvents.TestEvents1.OnMyEvent2(arg1, arg2);
                }
            }

            """.Replace("\n", Environment.NewLine).TrimStart();

        // Act
        var generatedCode = await GetGeneratedOutputAsync(generator, source1, source2);

        // Assert
        Assert.Equal(expectedGeneratedCode, generatedCode);
    }

    private static async Task<string> GetGeneratedOutputAsync(EventGenerator generator, params string[] sources)
    {
        // Create a Roslyn compilation for the source code
        var references = AppDomain.CurrentDomain.GetAssemblies()
            .Where(a => !a.IsDynamic)
            .Select(a => MetadataReference.CreateFromFile(a.Location))
            .Cast<MetadataReference>()
            .ToList();

        // Add a reference to the DLL containing the OnEvent attribute
        const string attributeDllPath = "ModernUO.CodeGeneratedEvents.Annotations.dll";
        references.Add(MetadataReference.CreateFromFile(attributeDllPath));

        var compilation = CSharpCompilation.Create("MyCompilation",
            sources.Select(source => CSharpSyntaxTree.ParseText(source)),
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        // Run the generator
        CSharpGeneratorDriver.Create(generator)
            .RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        // Get the generated syntax tree
        var generatedTree = outputCompilation.SyntaxTrees.Last();
        var generatedText = await generatedTree.GetTextAsync();

        return generatedText.ToString();
    }
}
